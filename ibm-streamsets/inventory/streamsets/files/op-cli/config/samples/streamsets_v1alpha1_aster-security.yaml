apiVersion: streamsets.cpd.ibm.com/v1alpha1
kind: Aster-security
metadata:
  name: aster-security-sample
spec:
  # Default values copied from <project_dir>/helm-charts/aster-security/values.yaml
  aster-security-deploy:
    appName: astersecurity
    application:
      args: /apps/bin/streamsets security run
      containerRegistry: cp.icr.io/cp/cpd/ibm-streamsets-
      dbUpgradeArgs: /apps/bin/streamsets security prod-update-schema --confirm prod-update-schema
        && /apps/bin/streamsets security seed-data --confirm seed-data
      dpmcliVersion: software-da90442114a1a46b25751d498687b0969cf5dd45
      imageName: aster-security
      imageSuffix: -amd64
      imageTag: 4b3b7bf5f34c475344311476ae0e3a38441ac129
      port: 9000
    cloudProvider: CPD
    cloudSqlProxy:
      enabled: false
    clusterDomain: svc.cluster.local
    dbHost: ibm-streamsets-self-managed-mysql-mysql-deploy-headless
    env:
      APP_CONF: /streamsets/etc
      APP_JAVA_OPTS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=12345
        -Dlog4j2.formatMsgNoLookups=true -Djava.util.logging.config.file=/streamsets/etc/logging.properties
        -Ddd.service={{ .Values.appName }} -Ddd.logs.injection=true -Ddd.env={{ .Release.Namespace
        }} -XX:+UseStringDeduplication -XX:MaxDirectMemorySize=10M -XX:MaxMetaspaceSize=204800K
        -XX:ReservedCodeCacheSize=240M -Xss1M -Xmx1024M -XX:+CrashOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/diagnostics -XX:ErrorFile=/diagnostics/app.err
      APP_LOG: /var/log/app.log
      DD_ENV: '{{ .Release.Namespace }}'
      DD_SERVICE: '{{ .Values.appName }}'
      DD_VERSION: '{{ .Values.application.imageTag }}'
      GOOGLE_APPLICATION_CREDENTIALS: /streamsets/etc/gcp-credentials.json
    global:
      host: https://cpd-zen.apps.rosa.rosa.sl9v.p3.openshiftapps.com
    healthCheck:
      path: /api/security/public/v3/status/health
      port: 9000
    heapShipper:
      enabled: false
    hpa:
      maxReplicas: 5
      minReplicas: 2
    istio:
      enabled: true
    nameSpaceServiceAccount: streamsets
    properties:
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[0].id: accountType
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[0].value: PLATFORM_ENTERPRISE
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[1].id: dpm.security.maxOrganizationUsers
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[1].value: "1000000"
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[2].id: dpm.jobrunner.maxRunningJobs
      app.accounttype.accountTypeMap.PLATFORM_ENTERPRISE[2].value: "1000"
      app.accounttype.accountTypeMap.PLATFORM_FREE[0].id: accountType
      app.accounttype.accountTypeMap.PLATFORM_FREE[0].value: PLATFORM_FREE
      app.accounttype.accountTypeMap.PLATFORM_FREE[1].id: dpm.security.maxOrganizationUsers
      app.accounttype.accountTypeMap.PLATFORM_FREE[1].value: "2"
      app.accounttype.accountTypeMap.PLATFORM_FREE[2].id: dpm.jobrunner.maxRunningJobs
      app.accounttype.accountTypeMap.PLATFORM_FREE[2].value: "2"
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[0].id: accountType
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[0].value: PLATFORM_FREE_TRIAL
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[1].id: dpm.security.maxOrganizationUsers
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[1].value: "1000000"
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[2].id: dpm.jobrunner.maxRunningJobs
      app.accounttype.accountTypeMap.PLATFORM_FREE_TRIAL[2].value: "1000"
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[0].id: accountType
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[0].value: PLATFORM_PROFESSIONAL
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[1].id: dpm.security.maxOrganizationUsers
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[1].value: "5"
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[2].id: dpm.jobrunner.maxRunningJobs
      app.accounttype.accountTypeMap.PLATFORM_PROFESSIONAL[2].value: "5"
      app.authorization.ibm.osb.id: ${ibm.osb.id}
      app.authorization.ibm.osb.secret.encoded: ${ibm.osb.secret.encoded}
      app.authorization.snowflake.partner.id: ${snowflake.partner.id}
      app.authorization.snowflake.partner.rotation.id: ""
      app.authorization.snowflake.partner.rotation.secret: ""
      app.authorization.snowflake.partner.secret: ${snowflake.partner.secret}
      app.baseUrl: https://localhost:${server.port}
      app.cloud.gcp.functions.baseUrl: https://us-central1-non-prod-stage-20730.cloudfunctions.net
      app.cloudpak.enabled: "true"
      app.default.secretstore.prefix: '{{ .Release.Namespace }}_aster_'
      app.externalUrl: https://${URL_PREFIX}/streamsets/aster
      app.freeTrial.expiration.period-in-days: "30"
      app.inmemory.http.trace.capacity: "100"
      app.instance.id: ${APP_INSTANCE_ID}
      app.ipauth.ipAuthConfigMap.enforcement.cache.lru_size: "100000"
      app.ipauth.ipAuthConfigMap.enforcement.cache.ttl_error_sec: "30"
      app.ipauth.ipAuthConfigMap.enforcement.cache.ttl_sec: "150"
      app.ipauth.ipAuthConfigMap.enforcement.cluster_type: default
      app.ipauth.ipAuthConfigMap.enforcement.disabled.prefixes: /api/security/*/api-docs,/api/security/swagger-ui,/error,/api/security/public,/api/security/oauth/jwks,/api/security/oauth/token-exchange,/api/security/*/users,/api/security/*/invites,/api/security/*/users.accept-tos,/api/security/*/orgs,/api/security/*/zones,/api/security/osb,/api/security/*/partner-connect,/api/security/oauth/sign-up
      app.ipauth.ipAuthConfigMap.enforcement.error_log_interval_sec: "20"
      app.ipauth.ipAuthConfigMap.enforcement.file.filename: /aster-security/security/src/main/etc/ip-auth.json
      app.ipauth.ipAuthConfigMap.enforcement.http.retry.backoff_factor: "2"
      app.ipauth.ipAuthConfigMap.enforcement.http.retry.initial_sec: "3"
      app.ipauth.ipAuthConfigMap.enforcement.http.retry.max_time: "30"
      app.ipauth.ipAuthConfigMap.enforcement.internal_only.prefixes: /nothing
      app.ipauth.ipAuthConfigMap.enforcement.metrics.prefix: aster.ipauth.enforcement
      app.ipauth.ipAuthConfigMap.enforcement.mode: disabled
      app.ipauth.ipAuthConfigMap.enforcement.rest_client.timeout_initial_sec: "45"
      app.ipauth.ipAuthConfigMap.enforcement.rest_client.timeout_update_sec: "5"
      app.ipauth.sch.bridge.cache.refresh.sec: "300"
      app.oauth2.aster.issuer-uri: https://${URL_PREFIX}
      app.oauth2.aster.jwk-set-uri: http://{{ .Values.appName }}.{{ .Release.Namespace
        }}.{{ .Values.clusterDomain }}:9000/api/security/oauth/jwks
      app.oauth2.aster.jws-algorithm: RS512
      app.oauth2.authorizationserver.jwt.algorithm: RS512
      app.oauth2.authorizationserver.jwt.audience: https://${URL_PREFIX}
      app.oauth2.authorizationserver.jwt.clientAccessTokenExpireHours: "24"
      app.oauth2.authorizationserver.jwt.clientAuthorizationCodeCacheExpireSecs: "60"
      app.oauth2.authorizationserver.jwt.clientRefreshTokenExpireHours: "8760"
      app.oauth2.authorizationserver.jwt.issuer: https://${URL_PREFIX}
      app.oauth2.authorizationserver.jwt.signatureKeys[0].id: ${jwt.signature.id.0}
      app.oauth2.authorizationserver.jwt.signatureKeys[0].privateKey: ${jwt.signature.private.0}
      app.oauth2.authorizationserver.jwt.signatureKeys[0].publicKey: ${jwt.signature.public.0}
      app.oauth2.authorizationserver.jwt.signatureKeys[1].id: ${jwt.signature.id.1}
      app.oauth2.authorizationserver.jwt.signatureKeys[1].privateKey: ${jwt.signature.private.1}
      app.oauth2.authorizationserver.jwt.signatureKeys[1].publicKey: ${jwt.signature.public.1}
      app.oauth2.authorizationserver.jwt.userAccessTokenExpireHours: "24"
      app.oauth2.authorizationserver.pkce.plainChallenge: "false"
      app.oauth2.cloudpak.base-url: https://${URL_PREFIX}
      app.oauth2.cloudpak.dummy-domain: streamsets.internal
      app.oauth2.cloudpak.issuer-uri: KNOXSSO
      app.oauth2.cloudpak.jwk-set-uri: https://${URL_PREFIX}/auth/jwks
      app.oauth2.cloudpak.jws-algorithm: RS256
      app.oauth2.multitenant.enabled: "true"
      app.oauth2.oidc.issuer-uri: https://securetoken.google.com/non-prod-stage-20730
      app.oauth2.oidc.jwk-set-uri: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com
      app.oauth2.oidc.jws-algorithm: RS256
      app.oauth2.oidc.skipEmailVerifySecret: ${oidc.skipEmailVerifySecret}
      app.partner.partner-region-mapper.zoneRegex.EU_001: (_|\\b)(aws|azure|gcp|ap|australia|eu|europe|japan|switzerland|uae|north|southeast|west)[_-](ap|asia|australia|europe|japan|switzerland|uae|north|northeast\\d?|east|southeast|south|west\\d?|central)(_(asia|europe|north|northeast|east|south))?([_-]\\d)?(\\.(aws|azure|gcp))?\\.snowflakecomputing.com\\b
      app.partner.partner-region-mapper.zoneRegex.US_001: ^([^:._-]*\\.)?snowflakecomputing.com\\b|(_|\\b)(aws|azure|gcp|us|ca|canada|south|east|west|central)[_-](gov|us|ca|canada|south|east|west|central\\d?)([_-](us|virginia|gov|east|west|central\\d?|\\d))?([_-](gov|us|virginia|west|\\d))?(_(gov|\\d))?([_.](aws|azure|gcp))?\\.snowflakecomputing.com\\b
      app.public.uiConfig.orgCreateEnabled: "true"
      app.purger.user-details.batch-size: "1000"
      app.purger.user-details.retention-in-days: "7"
      app.queue.email.topicId: '{{ .Release.Namespace }}-email'
      app.saml2.authority: https://${URL_PREFIX}
      app.saml2.basePath: /api/security
      app.saml2.reEncryptionBatchSize: "50"
      app.saml2.skewMillis: "300000"
      app.saml2.spKeyPkcs8Passwords[0]: ${saml.pkcs8.password}
      app.sch.instances[0].asterCookie: S4_ASTER
      app.sch.instances[0].authToken: ${token}
      app.sch.instances[0].componentId: ${componentId}
      app.sch.instances[0].instanceId: default
      app.sch.instances[0].landingUrl: https://${URL_PREFIX}/streamsets/main/security/public-rest/v1/aster/landing
      app.sch.instances[0].sessionCookie: S4_SESSION
      app.sch.instances[0].url: https://${URL_PREFIX}/streamsets/main
      app.sch.instances[0].version: 4.0.0-SNAPSHOT
      app.secretstore.mode: aws
      app.user.invite.valid-period-in-days: "7"
      coffee-boots.cache.spec.allZones: expireAfterWrite=10s
      coffee-boots.cache.spec.availableInstances: expireAfterWrite=10s
      coffee-boots.cache.spec.availableZones: expireAfterWrite=10s
      coffee-boots.cache.spec.enabledInstances: expireAfterWrite=10s
      coffee-boots.cache.spec.instancesStats: expireAfterWrite=60s
      coffee-boots.cache.spec.orgName: expireAfterWrite=30s
      coffee-boots.cache.spec.publicInstancesHealth: expireAfterWrite=10s
      dpm.components.fetch.batch.size: "500"
      dpm.components.fetch.initial.delay.secs: "60"
      dpm.components.fetch.interval.secs: "60"
      dpm.connectionTimeout.millis: "60000"
      dpm.domainForRequestedUrlCookie: hub.streamsets.com
      dpm.security.validationTokenFrequency.secs: "30"
      dpm.useQueryStringForRequestedUrl: "false"
      oauth2.access.token.factory: legacy
      rest.errors.includeExceptionDetails: "false"
      retry.maxAttempts: "3"
      retry.maxDelayMs: "1000"
      server.jetty.max-http-header-size: "150000"
      server.jetty.max-http-request-header-size: "150000"
      server.max-http-header-size: "150000"
      server.max-http-request-header-size: "150000"
      server.port: "9000"
      server.servlet.context-path: /api/security
      server.tomcat.max-http-header-size: "150000"
      server.tomcat.max-http-request-header-size: "150000"
      spring.config.import: configtree:/streamsets/etc/secrets/
      spring.datasource.driverClassName: org.mariadb.jdbc.Driver
      spring.datasource.password: ${app.db.pass}
      spring.datasource.url: jdbc:mysql://{{ .Values.dbHost }}:3306/{{ .Release.Namespace
        }}astersecurity?permitMysqlScheme=true&sslMode=trust&allowPublicKeyRetrieval=true
      spring.datasource.username: ${app.db.user}
      spring.jackson.serialization.indent_output: "true"
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL5InnoDBDialect
      spring.jpa.properties.hibernate.hbm2ddl.auto: none
      spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults: "false"
      spring.liquibase.change-log: classpath:/db/changelog/db-changelog-master.xml
      spring.liquibase.enabled: "false"
      spring.profiles.active: aster-{{ .Release.Namespace }},saml,schAuthProxy
      springdoc.swagger-ui.deepLinking: "true"
      springdoc.swagger-ui.defaultModelExpandDepth: "0"
      springdoc.swagger-ui.defaultModelsExpandDepth: "0"
      springdoc.swagger-ui.filter: "true"
      springdoc.swagger-ui.operationsSorter: method
      springdoc.swagger-ui.tagsSorter: alpha
      streamsets.metrics.datadog.apiKey: ${api.key}
      streamsets.metrics.datadog.enabled: "true"
      streamsets.metrics.datadog.step: "60"
      streamsets.metrics.tags.env: '{{ .Release.Namespace }}'
      streamsets.metrics.tags.instance: ${APP_INSTANCE_ID}
      streamsets.metrics.tags.service: '{{ .Values.appName }}'
      streamsets.metrics.tags.version: '{{ .Values.application.imageTag }}'
    resources:
      limits:
        cpu: "2"
        memory: 3Gi
      requests:
        cpu: "2"
        memory: 3Gi
    secrets:
    - bootstrap: true
      name: astersecurity-secret
      secrets:
        app.db.pass: app.db.pass
        app.db.user: app.db.user
        componentId: componentId
        jwt.signature.id.0: jwt.signature.id.0
        jwt.signature.id.1: jwt.signature.id.1
        jwt.signature.private.0: jwt.signature.private.0
        jwt.signature.private.1: jwt.signature.private.1
        jwt.signature.public.0: jwt.signature.public.0
        jwt.signature.public.1: jwt.signature.public.1
        oidc.skipEmailVerifySecret: oidc.skipEmailVerifySecret
        saml.pkcs8.password: saml.pkcs8.password
        token: token
    - name: osb
      secrets:
        ibm.osb.id: ibm.osb.id
        ibm.osb.secret.encoded: ibm.osb.secret.encoded
    - name: snowflake
      secrets:
        snowflake.partner.id: snowflake.partner.id
        snowflake.partner.secret: snowflake.partner.secret
    - name: datadog-agent
      secrets:
        datadog.api.key: api-key
    - name: dpm-admin
      secrets:
        dpm.admin.password: dpm.admin.password
        dpm.admin.user: dpm.admin.user
    - name: db-service-account
      secrets:
        db.service.pass: db.service.pass
        db.service.user: db.service.user
    virtualService:
      gateway: '{{ .Release.Namespace }}-sch-gateway'
      prefix: api/security
      prefixes:
      - /streamsets/aster/api/security
      rewrite: /api/security
    volumes:
    - name: gcp-credentials
      secret:
        secretName: gcp-credentials
    volumesMount:
    - mountPath: /streamsets/etc/gcp-credentials.json
      name: gcp-credentials
      subPath: gcp-credentials.json
  
  
